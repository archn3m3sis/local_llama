"""empty message

Revision ID: 00faf5453aaa
Revises: 702de732ebe0
Create Date: 2025-07-22 20:05:42.088391

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '00faf5453aaa'
down_revision: Union[str, Sequence[str], None] = '702de732ebe0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('networkzone',
    sa.Column('zone_id', sa.Integer(), nullable=False),
    sa.Column('zone_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('zone_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('security_level', sa.Integer(), nullable=False),
    sa.Column('vlan_range', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('subnet_range', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('firewall_policy', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('access_requirements', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_dmz', sa.Boolean(), nullable=False),
    sa.Column('is_isolated', sa.Boolean(), nullable=False),
    sa.Column('parent_zone_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_zone_id'], ['networkzone.zone_id'], ),
    sa.PrimaryKeyConstraint('zone_id')
    )
    op.create_table('softwarebaseline',
    sa.Column('baseline_id', sa.Integer(), nullable=False),
    sa.Column('systype_id', sa.Integer(), nullable=False),
    sa.Column('sw_name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('required_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('min_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('max_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('is_mandatory', sa.Boolean(), nullable=False),
    sa.Column('compliance_category', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['systype_id'], ['systype.systype_id'], ),
    sa.PrimaryKeyConstraint('baseline_id')
    )
    op.create_table('softwarecatalog',
    sa.Column('software_catalog_id', sa.Integer(), nullable=False),
    sa.Column('sw_name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('sw_vendor', sa.Integer(), nullable=True),
    sa.Column('sw_category', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('sw_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('latest_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('is_licensed', sa.Boolean(), nullable=False),
    sa.Column('license_model', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('eol_date', sa.DateTime(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['sw_vendor'], ['swmanufacturer.swmanu_id'], ),
    sa.PrimaryKeyConstraint('software_catalog_id'),
    sa.UniqueConstraint('sw_name')
    )
    op.create_table('configurationbaseline',
    sa.Column('baseline_id', sa.Integer(), nullable=False),
    sa.Column('baseline_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('baseline_version', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('systype_id', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('config_template', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('approved_date', sa.DateTime(), nullable=True),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('effective_date', sa.DateTime(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_mandatory', sa.Boolean(), nullable=False),
    sa.Column('compliance_level', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('parent_baseline_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['parent_baseline_id'], ['configurationbaseline.baseline_id'], ),
    sa.ForeignKeyConstraint(['systype_id'], ['systype.systype_id'], ),
    sa.PrimaryKeyConstraint('baseline_id')
    )
    op.create_table('softwareversion',
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('software_catalog_id', sa.Integer(), nullable=False),
    sa.Column('version_number', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('release_date', sa.DateTime(), nullable=True),
    sa.Column('end_support_date', sa.DateTime(), nullable=True),
    sa.Column('is_current', sa.Boolean(), nullable=False),
    sa.Column('is_supported', sa.Boolean(), nullable=False),
    sa.Column('is_vulnerable', sa.Boolean(), nullable=False),
    sa.Column('vulnerability_cves', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('min_os_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('max_os_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('release_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('download_url', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('checksum', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
    sa.Column('file_size_mb', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['software_catalog_id'], ['softwarecatalog.software_catalog_id'], ),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_table('assetconfiguration',
    sa.Column('config_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('snapshot_date', sa.DateTime(), nullable=False),
    sa.Column('config_data', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('config_hash', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('is_baseline', sa.Boolean(), nullable=False),
    sa.Column('baseline_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('config_id')
    )
    op.create_table('assetsoftware',
    sa.Column('asset_software_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('software_catalog_id', sa.Integer(), nullable=False),
    sa.Column('installed_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('install_date', sa.DateTime(), nullable=True),
    sa.Column('install_path', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('install_method', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('installed_by', sa.Integer(), nullable=True),
    sa.Column('license_key', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('license_assigned_date', sa.DateTime(), nullable=True),
    sa.Column('license_expiry_date', sa.DateTime(), nullable=True),
    sa.Column('discovered_date', sa.DateTime(), nullable=False),
    sa.Column('last_seen', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('uninstall_date', sa.DateTime(), nullable=True),
    sa.Column('uninstalled_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['installed_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['software_catalog_id'], ['softwarecatalog.software_catalog_id'], ),
    sa.ForeignKeyConstraint(['uninstalled_by'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('asset_software_id')
    )
    op.create_table('configurationitem',
    sa.Column('ci_id', sa.Integer(), nullable=False),
    sa.Column('ci_name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('ci_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('ci_category', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('ci_status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=True),
    sa.Column('serial_number', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('custodian_id', sa.Integer(), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('criticality', sa.Integer(), nullable=False),
    sa.Column('environment', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('acquisition_date', sa.DateTime(), nullable=True),
    sa.Column('warranty_expiry', sa.DateTime(), nullable=True),
    sa.Column('last_audit_date', sa.DateTime(), nullable=True),
    sa.Column('next_audit_date', sa.DateTime(), nullable=True),
    sa.Column('configuration_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('modified_date', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['custodian_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('ci_id')
    )
    op.create_table('installedsoftware',
    sa.Column('software_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('sw_name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('sw_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('sw_vendor', sa.Integer(), nullable=True),
    sa.Column('install_date', sa.DateTime(), nullable=True),
    sa.Column('install_path', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('license_key', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('license_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('license_expiry', sa.DateTime(), nullable=True),
    sa.Column('discovered_date', sa.DateTime(), nullable=False),
    sa.Column('last_seen', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['sw_vendor'], ['swmanufacturer.swmanu_id'], ),
    sa.PrimaryKeyConstraint('software_id')
    )
    op.create_table('networkinterface',
    sa.Column('interface_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('interface_name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('mac_address', sqlmodel.sql.sqltypes.AutoString(length=17), nullable=True),
    sa.Column('ip_address', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('subnet_mask', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('gateway', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('dns_primary', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('dns_secondary', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('vlan_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.PrimaryKeyConstraint('interface_id')
    )
    op.create_table('patchhistory',
    sa.Column('patch_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('patch_name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('patch_kb', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('patch_category', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('patch_severity', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('install_date', sa.DateTime(), nullable=False),
    sa.Column('install_status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('install_method', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('installed_by', sa.Integer(), nullable=False),
    sa.Column('reboot_required', sa.Boolean(), nullable=False),
    sa.Column('reboot_completed', sa.DateTime(), nullable=True),
    sa.Column('rollback_date', sa.DateTime(), nullable=True),
    sa.Column('rollback_by', sa.Integer(), nullable=True),
    sa.Column('rollback_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['installed_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['rollback_by'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('patch_id')
    )
    op.create_table('servicedependency',
    sa.Column('dependency_id', sa.Integer(), nullable=False),
    sa.Column('parent_asset_id', sa.Integer(), nullable=False),
    sa.Column('child_asset_id', sa.Integer(), nullable=False),
    sa.Column('dependency_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('dependency_direction', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('criticality', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('port_number', sa.Integer(), nullable=True),
    sa.Column('protocol', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('discovered_date', sa.DateTime(), nullable=False),
    sa.Column('discovered_method', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('validated_date', sa.DateTime(), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('impact_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['child_asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['parent_asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('dependency_id')
    )
    op.create_table('temticket',
    sa.Column('temticket_id', sa.Integer(), nullable=False),
    sa.Column('submission_date', sa.DateTime(), nullable=False),
    sa.Column('global_ticket_id', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('submission_emp', sa.Integer(), nullable=False),
    sa.Column('submission_description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('response_date', sa.DateTime(), nullable=True),
    sa.Column('response_emp', sa.Integer(), nullable=True),
    sa.Column('response_reference_link', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('response_result', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('response_comments', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('resolution_date', sa.DateTime(), nullable=True),
    sa.Column('time_to_respond', sa.Integer(), nullable=True),
    sa.Column('time_to_resolve', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.project_id'], ),
    sa.ForeignKeyConstraint(['response_emp'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['submission_emp'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('temticket_id')
    )
    op.create_table('cirelationship',
    sa.Column('relationship_id', sa.Integer(), nullable=False),
    sa.Column('parent_ci_id', sa.Integer(), nullable=False),
    sa.Column('child_ci_id', sa.Integer(), nullable=False),
    sa.Column('relationship_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('relationship_status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('validated_date', sa.DateTime(), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['child_ci_id'], ['configurationitem.ci_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['parent_ci_id'], ['configurationitem.ci_id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('relationship_id')
    )
    op.create_table('compliancecheck',
    sa.Column('check_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('check_date', sa.DateTime(), nullable=False),
    sa.Column('compliance_standard', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('standard_version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('scan_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('total_checks', sa.Integer(), nullable=False),
    sa.Column('passed_checks', sa.Integer(), nullable=False),
    sa.Column('failed_checks', sa.Integer(), nullable=False),
    sa.Column('warning_checks', sa.Integer(), nullable=False),
    sa.Column('not_applicable', sa.Integer(), nullable=False),
    sa.Column('compliance_score', sa.Float(), nullable=False),
    sa.Column('severity_high', sa.Integer(), nullable=False),
    sa.Column('severity_medium', sa.Integer(), nullable=False),
    sa.Column('severity_low', sa.Integer(), nullable=False),
    sa.Column('report_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('report_file_path', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('performed_by', sa.Integer(), nullable=False),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('approval_date', sa.DateTime(), nullable=True),
    sa.Column('next_check_date', sa.DateTime(), nullable=True),
    sa.Column('remediation_required', sa.Boolean(), nullable=False),
    sa.Column('remediation_ticket_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['performed_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['remediation_ticket_id'], ['temticket.temticket_id'], ),
    sa.PrimaryKeyConstraint('check_id')
    )
    op.create_table('configurationchange',
    sa.Column('change_id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('change_date', sa.DateTime(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('change_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('field_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('old_value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('new_value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('change_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ticket_id', sa.Integer(), nullable=True),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('approval_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.asset_id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['ticket_id'], ['temticket.temticket_id'], ),
    sa.PrimaryKeyConstraint('change_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('configurationchange')
    op.drop_table('compliancecheck')
    op.drop_table('cirelationship')
    op.drop_table('temticket')
    op.drop_table('servicedependency')
    op.drop_table('patchhistory')
    op.drop_table('networkinterface')
    op.drop_table('installedsoftware')
    op.drop_table('configurationitem')
    op.drop_table('assetsoftware')
    op.drop_table('assetconfiguration')
    op.drop_table('softwareversion')
    op.drop_table('configurationbaseline')
    op.drop_table('softwarecatalog')
    op.drop_table('softwarebaseline')
    op.drop_table('networkzone')
    # ### end Alembic commands ###
