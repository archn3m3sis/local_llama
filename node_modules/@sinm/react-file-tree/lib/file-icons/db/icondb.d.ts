declare const _exports: {
    [n: number]: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[];
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[] | undefined;
    push(...items: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]): number;
    concat(...items: ConcatArray<(((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]>[]): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    concat(...items: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[] | ConcatArray<(((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]>)[]): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    join(separator?: string | undefined): string;
    reverse(): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    shift(): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[] | undefined;
    slice(start?: number | undefined, end?: number | undefined): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    sort(compareFn?: ((a: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], b: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]) => number) | undefined): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    splice(start: number, deleteCount?: number | undefined): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    splice(start: number, deleteCount: number, ...items: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    unshift(...items: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]): number;
    indexOf(searchElement: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], fromIndex?: number | undefined): number;
    every<S extends (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]>(predicate: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => U, thisArg?: any): U[];
    filter<S_1 extends (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]>(predicate: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => unknown, thisArg?: any): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    reduce(callbackfn: (previousValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentIndex: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[];
    reduce(callbackfn: (previousValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentIndex: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], initialValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[];
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentIndex: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentIndex: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[];
    reduceRight(callbackfn: (previousValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentIndex: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], initialValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[];
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], currentIndex: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]>(predicate: (this: void, value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, obj: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => value is S_2, thisArg?: any): S_2 | undefined;
    find(predicate: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, obj: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => unknown, thisArg?: any): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[] | undefined;
    findIndex(predicate: (value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, obj: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => unknown, thisArg?: any): number;
    fill(value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], start?: number | undefined, end?: number | undefined): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    copyWithin(target: number, start: number, end?: number | undefined): ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[];
    entries(): IterableIterator<[number, (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<(((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]>;
    includes(searchElement: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], fromIndex?: number | undefined): boolean;
    flatMap<U_3, This = undefined>(callback: (this: This, value: (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[], index: number, array: ((((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[])[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
    flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
    at(index: number): (((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[] | undefined;
    [Symbol.iterator](): IterableIterator<(((string | boolean | RegExp | string[] | undefined)[] | (string | RegExp | null[])[])[] | number[][] | {})[] | (((string | number | boolean | RegExp | string[] | undefined)[] | (string | number | RegExp | null[])[] | (string | boolean | RegExp | null[] | undefined)[])[] | {
        binary: number;
        coffee: number;
        go: number;
        haskell: number;
        js: number;
        perl: number;
        python: number;
        ruby: number;
        rust: number;
        executable: number;
        coffeeTest: number;
        genericTest: number;
        goTest: number;
        haskellTest: number;
        jsTest: number;
        perlTest: number;
        pythonTest: number;
        rubyTest: number;
        rustTest: number;
        tsTest: number;
        ts: number;
    })[]>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
};
export = _exports;
